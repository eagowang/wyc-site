<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on eago</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on eago</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 Aug 2019 20:56:06 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[React]弹窗</title>
      <link>http://localhost:1313/post/react%E5%BC%B9%E7%AA%97/</link>
      <pubDate>Thu, 01 Aug 2019 20:56:06 +0800</pubDate>
      
      <guid>http://localhost:1313/post/react%E5%BC%B9%E7%AA%97/</guid>
      <description>&lt;p&gt;如何实现一个通用的弹窗组件？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Git]git学习（三）</title>
      <link>http://localhost:1313/post/gitgit%E5%AD%A6%E4%B9%A0%E4%B8%89/</link>
      <pubDate>Tue, 23 Jul 2019 08:36:27 +0800</pubDate>
      
      <guid>http://localhost:1313/post/gitgit%E5%AD%A6%E4%B9%A0%E4%B8%89/</guid>
      <description>分支简介 Git 保存的不是文件的变化或差异，而是一系列不同时刻的文件快照。 在进行提交操作时，Git 会保存一个提交对象。包含一个指向内容快照的指针，</description>
    </item>
    
    <item>
      <title>[Git]git学习（二）</title>
      <link>http://localhost:1313/post/gitgit%E5%AD%A6%E4%B9%A0%E4%BA%8C/</link>
      <pubDate>Mon, 22 Jul 2019 15:49:08 +0800</pubDate>
      
      <guid>http://localhost:1313/post/gitgit%E5%AD%A6%E4%B9%A0%E4%BA%8C/</guid>
      <description>获取仓库 git init git clone 记录每次更新到仓库 工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。 已跟踪：已跟踪的文件是指那些被纳入了版本控制的文</description>
    </item>
    
    <item>
      <title>[计划]计划</title>
      <link>http://localhost:1313/post/%E8%AE%A1%E5%88%92%E8%AE%A1%E5%88%92/</link>
      <pubDate>Mon, 22 Jul 2019 14:12:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E8%AE%A1%E5%88%92%E8%AE%A1%E5%88%92/</guid>
      <description>2019-07-22 ~ 2019-07-26 滑块验证码模块回顾（imgCaptcha.js） 开放平台业务整理 文件上传漏洞的攻防 git 学习</description>
    </item>
    
    <item>
      <title>[git]git学习（一）</title>
      <link>http://localhost:1313/post/gitgit%E5%AD%A6%E4%B9%A0%E4%B8%80/</link>
      <pubDate>Mon, 22 Jul 2019 13:58:29 +0800</pubDate>
      
      <guid>http://localhost:1313/post/gitgit%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid>
      <description>注:内容全部为git pro摘要 我大概知道这些命令 1 2 3 4 5 6 7 8 9 10 11 12 13 // 提交 git add git commit git push // 拉取 git clone git pull git fetch git merge // 分支 git checkout git branch git tag 日常工作</description>
    </item>
    
    <item>
      <title>[学习]正则表达式</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 18 Jul 2019 10:58:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>一直都只会写简单的正则，平时也基本不写，就连 test，exec，match 是谁的方法都分不清。笔记主要参考《javascript 正则表达式迷</description>
    </item>
    
    <item>
      <title>[算法]二分查找</title>
      <link>http://localhost:1313/post/%E7%AE%97%E6%B3%95%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Fri, 05 Jul 2019 10:59:47 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%AE%97%E6%B3%95%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>定义 二分查找（二分搜索或折半搜索）是一种在有序数组中查找某一特定元素的搜索算法。 搜索过程从中间开始，如果中间元素正好是要查找的元素，则搜索过</description>
    </item>
    
    <item>
      <title>[学习]前端模块化</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Thu, 04 Jul 2019 10:49:08 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>AMD Asynchronous Module Definition，意思是异步模块定义。 用法： 1 2 3 4 // 定义模块 define(id?, dependencies?, factory) // 引用模块 require([module], callback) 对于依赖的模块AMD是提前执行，代表是Requi</description>
    </item>
    
    <item>
      <title>[学习]动态nodeList、静态nodeList</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E5%8A%A8%E6%80%81nodelist%E9%9D%99%E6%80%81nodelist/</link>
      <pubDate>Fri, 28 Jun 2019 09:41:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E5%8A%A8%E6%80%81nodelist%E9%9D%99%E6%80%81nodelist/</guid>
      <description>NodeList NodeList 是一个节点的集合，是由 Node.childNodes 和 document.querySelectorAll 返回的。 动态 NodeList：如果文档树中的节点树发生变化，则已存在的实时 NodeList 对象也会随之变化</description>
    </item>
    
    <item>
      <title>[学习]去抖、节流</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E5%8E%BB%E6%8A%96%E8%8A%82%E6%B5%81/</link>
      <pubDate>Thu, 27 Jun 2019 18:45:53 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E5%8E%BB%E6%8A%96%E8%8A%82%E6%B5%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[学习]排序</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 18 Jun 2019 17:48:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E6%8E%92%E5%BA%8F/</guid>
      <description>公用的数据 1 var nums = [4, 2, 16, 12, 32, 21, 33, 1]; array.sort 1 2 3 4 5 6 7 8 9 nums.sort(function(a, b) { if (a &amp;lt; b) { return -1; } if (a &amp;gt; b) { return 1; } return 0; }); 冒泡排序 依次交换相邻的两个数字的顺序（大的</description>
    </item>
    
    <item>
      <title>[面试]问题</title>
      <link>http://localhost:1313/post/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 17 Jun 2019 22:37:14 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>面试问题 闭包，原型链 es6 class 和原型的区别，有没有私有属性，为什么？ 服务端渲染 前端监控 sentry 原理 react-router 原理 前端从输入 url 到展示页面，经历了什么 全站优化 webpack 原理</description>
    </item>
    
    <item>
      <title>[学习]promise</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AApromise/</link>
      <pubDate>Mon, 17 Jun 2019 09:59:11 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AApromise/</guid>
      <description>实现 以下是实现和一些关键注释 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56</description>
    </item>
    
    <item>
      <title>[学习]microtask,macrotask</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0microtaskmacrotask/</link>
      <pubDate>Fri, 14 Jun 2019 21:28:59 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0microtaskmacrotask/</guid>
      <description>Tasks, microtasks, queues and schedules 用一句话概括，就是一个 macrotask 中出现的 mircotask 都在这一次 eventloop 中执行，出现的 macrotask 需要在新的 eventloop 执行 macrotask(task) setTimeout = setInterval setImmediate requestAnimationFrame I/O UI rendering microtask process.nextTick promise callback 例子： 1 2 3 4 5 6 7 8 9 10</description>
    </item>
    
    <item>
      <title>[学习]作用域、闭包、原型链</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AD%E5%8C%85%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
      <pubDate>Thu, 13 Jun 2019 19:16:04 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AD%E5%8C%85%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
      <description>作用域，闭包 es6 之前，js 只有全局作用域和函数作用域 1 2 3 4 5 6 7 8 9 10 11 console.log(foo); function func() { var bar = 1; return function() { console.log(bar++); }; } var foo = 123; var func2 = func(); func2(); //1 func2(); //2 这段代码有两个阶</description>
    </item>
    
    <item>
      <title>[学习]css知识点</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0css%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Wed, 12 Jun 2019 13:46:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0css%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>基础 盒子模型 margin,border,padding,content(外边距，边框，内边距，内容) 常说的元素的 width，height 指的</description>
    </item>
    
    <item>
      <title>[学习]html知识点</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0html%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Wed, 12 Jun 2019 09:58:58 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0html%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>doctype doctype 声明不是 html 标签，用来告诉浏览器当前页面使用哪种 html 版本 html4.01 中，需要引入 dtd（文档类型声明），因为 html4.01 基于 SGML（standard generalized markup lan</description>
    </item>
    
    <item>
      <title>[学习]学习大纲</title>
      <link>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/</link>
      <pubDate>Tue, 11 Jun 2019 18:17:06 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/</guid>
      <description>计划 45 天系统整理一下前端知识，并整理出笔记 脑图</description>
    </item>
    
    <item>
      <title>React受控组件和非受控组件</title>
      <link>http://localhost:1313/post/react%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E5%92%8C%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sat, 08 Jun 2019 11:23:07 +0800</pubDate>
      
      <guid>http://localhost:1313/post/react%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E5%92%8C%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</guid>
      <description>受控组件：用 state 控制取值的表单输入元素叫做受控组件 非受控组件：使用 dom 节点控制取值的表单输入元素 什么时候使用受控组件，非受控组件 原文：contr</description>
    </item>
    
    <item>
      <title>Refs和refs转发</title>
      <link>http://localhost:1313/post/refs%E5%92%8Crefs%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Fri, 07 Jun 2019 09:42:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/refs%E5%92%8Crefs%E8%BD%AC%E5%8F%91/</guid>
      <description>refs 使用 Refs 可以访问 dom 节点 何时使用 refs 几种适合使用 refs 的情况： 管理焦点（焦点没法通过 state 控制） 触发强制动画 集成第三方 dom 库 createRef 1 2 3 4 5 6 7 8 9 10 11 class Input extends</description>
    </item>
    
    <item>
      <title>React</title>
      <link>http://localhost:1313/post/react/</link>
      <pubDate>Thu, 06 Jun 2019 19:34:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/react/</guid>
      <description>shouldComponentUpdate 和 React.pureComponent 区别： React.pureComponent 浅比较，shouldComponentUpdate</description>
    </item>
    
    <item>
      <title>[算法]二叉查找树</title>
      <link>http://localhost:1313/post/%E7%AE%97%E6%B3%95%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</link>
      <pubDate>Tue, 04 Jun 2019 21:46:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%AE%97%E6%B3%95%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</guid>
      <description>二叉查找树（Binary Search Tree，BST），也叫二叉搜索树，排序二叉树，指一棵空树或具有下列性质的二叉树： 若任意节点的左子树不为空，则左子</description>
    </item>
    
    <item>
      <title>[数据结构]树</title>
      <link>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%91/</link>
      <pubDate>Fri, 31 May 2019 14:20:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%91/</guid>
      <description>树的定义 树是一种数据结构，用来模拟具有树状结构性质的数据集合。由 n（n&amp;gt;0）个有限节点组成一个具有层次关系的集合。 树的特点 每个节点都只</description>
    </item>
    
    <item>
      <title>[数据结构]二叉树</title>
      <link>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Fri, 31 May 2019 13:47:11 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>什么是二叉树 任意节点的度不大于 2 的树是二叉树 二叉树创建 节点定义 1 2 3 4 5 function Node(val) { this.val = val; this.left = null; this.right = null; } 粗暴创建 1 2 3 4 5 6 7 8 var tree = new Node(1); tree.left = new Node(2);</description>
    </item>
    
    <item>
      <title>Git Submodule</title>
      <link>http://localhost:1313/post/git-submodule/</link>
      <pubDate>Thu, 30 May 2019 17:08:10 +0800</pubDate>
      
      <guid>http://localhost:1313/post/git-submodule/</guid>
      <description>场景描述：比如这个 hugo 博客，整个博客是一个 git 仓库，生成的 public 文件对应一个 git 仓库 添加子模块 在项目根目录 1 git add submodule git@github.com:eagowang/eagowang.github.io.git public 这条命令会自动 clone，并生成</description>
    </item>
    
    <item>
      <title>Hack微信7.0.4 popState 刷新bug</title>
      <link>http://localhost:1313/post/hack%E5%BE%AE%E4%BF%A17.0.4-popstate-%E5%88%B7%E6%96%B0bug/</link>
      <pubDate>Thu, 23 May 2019 11:40:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hack%E5%BE%AE%E4%BF%A17.0.4-popstate-%E5%88%B7%E6%96%B0bug/</guid>
      <description>原因：业务要求需要 pushState 一次 探索：发现微信 pushState 两次，且两次带上不同的 hash，再回退，不会有刷新 解决办法： 1 2 3 componentDidMount(){ window.history.replaceState({fix: true}, &amp;#39;&amp;#39;, &amp;#39;#fix&amp;#39;) } 具体问题描述看： 安卓微</description>
    </item>
    
    <item>
      <title>Taro开发小程序总结</title>
      <link>http://localhost:1313/post/taro%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 23 May 2019 11:29:41 +0800</pubDate>
      
      <guid>http://localhost:1313/post/taro%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%80%BB%E7%BB%93/</guid>
      <description>小程序 小程序可以使用字体图标，下载字体文件到本地，将 iconfont.css 中的 font-face 替换成在线地址即可 动态删减小程序 tabbar item，会出现抖动。原因是每个 page 都有一个 tabbar 实</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人博客</title>
      <link>http://localhost:1313/post/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 23 May 2019 11:10:15 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>hugo 命令 创建一篇新博客 1 hugo new post/xxx.md 本地运行 hugo server 1 hugo server --buildDrafts --watch 部署 1 hugo --baseUrl=&amp;#34;http://eagowang.github.io&amp;#34;</description>
    </item>
    
    <item>
      <title>语义化版本</title>
      <link>http://localhost:1313/post/%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC/</link>
      <pubDate>Mon, 25 Mar 2019 13:51:20 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC/</guid>
      <description>版本格式 主版本号.次版本号.修订号，版本号递增规则如下： 主版本号（major）：当你做了不兼容的 API 修改 次版本号（minor）：当你做了向下兼</description>
    </item>
    
    <item>
      <title>webpack4打包vendor chunk</title>
      <link>http://localhost:1313/post/webpack4%E6%89%93%E5%8C%85vendor-chunk/</link>
      <pubDate>Mon, 25 Mar 2019 11:28:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/webpack4%E6%89%93%E5%8C%85vendor-chunk/</guid>
      <description>根据爆栈网回答整理：webpack-4-create-vendor-chunk 在 webpack3 配置中，我们像下面这样创建一个分离的 vendor.js chunk 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>简历</title>
      <link>http://localhost:1313/post/resume/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/resume/</guid>
      <description>个人信息 王懿晨/男/1995 邮箱：15527179911@163.com 本科：武汉大学计算机系 工作年限：2 年 技术博客：https://eag</description>
    </item>
    
  </channel>
</rss>